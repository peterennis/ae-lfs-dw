#!/bin/bash
# The proper way to start a bash script

set -e -u -x
source ./aeSCRIPT_LIBRARY
trap simple_error ERR

cd /sources
echo "=> pwd="`pwd`

echo
echo _________________________________________________________________________________
echo ${0}
DateAndTime=$(date +%Y_%m_%d_%T)
echo ${DateAndTime}" "${0}" Start $(pwd)" >> /lfs-logs/logSBU

# Set variables for the package name and type
PkgName=udev-096
PkgType=bz2
SecondaryPkgName=udev-config-6.2
echo ${PkgName}" "${PkgType}" "${SecondaryPkgName}

# unpack
if [[ "${PkgType}" == "gz" ]] ; then
	gunzip ${PkgName}.tar.gz
	tar -xvf ${PkgName}.tar
elif [[ "${PkgType}" == "bz2" ]] ; then
	bzip2 -cd ${PkgName}.tar.bz2 | tar xvf -
fi

# Configure and install
cd ${PkgName}
echo "=> pwd="`pwd`
echo ----------8\<----------8\<----------8\<----------8\<----------8\<----------8\<----------
echo "=> "${0}" "`exec env`
tar xf ../${SecondaryPkgName}.tar.bz2
install -dv /lib/{firmware,udev/devices/{pts,shm}}
mknod -m0666 /lib/udev/devices/null c 1 3
ln -sv /proc/self/fd /lib/udev/devices/fd
ln -sv /proc/self/fd/0 /lib/udev/devices/stdin
ln -sv /proc/self/fd/1 /lib/udev/devices/stdout
ln -sv /proc/self/fd/2 /lib/udev/devices/stderr
ln -sv /proc/kcore /lib/udev/devices/core
make EXTRAS="extras/ata_id extras/cdrom_id extras/edd_id \
	extras/firmware extras/floppy extras/path_id \
	extras/scsi_id extras/usb_id extras/volume_id"
make test
make DESTDIR=/ \
	EXTRAS="extras/ata_id extras/cdrom_id extras/edd_id \
	extras/firmware extras/floppy extras/path_id \
	extras/scsi_id extras/usb_id extras/volume_id" install
cp -v ${SecondaryPkgName}/[0-9]* /etc/udev/rules.d/
# Install the documentation that explains how to create Udev rules:
install -m644 -D -v docs/writing_udev_rules/index.html \
	/usr/share/doc/${PkgName}/index.html
### Removed in 6.2 -----8<-----
#### It is recommended that you run the following commands to aid the LFS development team in debugging possible missed events and finding an acceptable solution more quickly.
###cat > bug.c << EOF
###/* Simple event recorder */
####define _GNU_SOURCE
####include <sys/types.h>
####include <sys/stat.h>
####include <fcntl.h>
####include <unistd.h>
####include <stdlib.h>
####include <argz.h>
###int main(int argc, char * argv[])
###{
###  char * envar;
###  char * envz;
###  size_t len;
###  int bug;
###  bug = open("/dev/bug", O_WRONLY | O_APPEND);
###  if (bug == -1)
###    return 0;
###
###  /* Ignore everything USB-related to avoid spamming the list */
###  envar = getenv("PHYSDEVPATH");
###  if (envar && strstr(envar, "usb"))
###    return 0;
###  envar = getenv("DEVPATH");
###  if (envar && strstr(envar, "usb"))
###    return 0;
###
###  setenv("_SEPARATOR", "-------------------------------", 1);
###  argz_create(environ, &envz, &len);
###  argz_stringify(envz, len, '\n');
###  envz[len-1]='\n';
###  write(bug, envz, len);
###  close(bug);
###  free(envz);
###  return 0;
###}
###EOF
#### Now compile it:
###gcc -o /lib/udev/bug bug.c
#### When booting the new LFS system, if any events are missed, a warning message will appear and a /dev/bugreport file will be created. The warning message will tell you where to send feedback. 
### Removed in 6.2 ----->8-----
#
echo ----------\>8----------\>8----------\>8----------\>8----------\>8----------\>8----------

# Remove the extracted source files and the compile directory
echo
cd /sources
echo "=> pwd="`pwd`
rm -rf ${PkgName}
echo "=> Removed directory "${PkgName}

DateAndTime=$(date +%Y_%m_%d_%T)
echo ${DateAndTime}" "${0}" End $(pwd)" >> /lfs-logs/logSBU
echo "=>DONE "${0}
echo
